#################################################
# Interfaces
#################################################

interface EventInterface {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface NetworkEventInterface {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface FundEventInterface {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface SharesChangeInterface {
  id: ID!
  fund: Fund!
  investor: Account!
  timestamp: BigInt!
  type: ShareChangeType!
  investmentState: InvestmentState!
  shares: BigDecimal!
  transaction: Transaction!
  calculations: CalculationState!
}

interface FundStateInterface {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

interface FeeSettingInterface {
  id: ID!
  fee: Fee!
  fund: Fund!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

interface PolicySettingInterface {
  id: ID!
  policy: Policy!
  fund: Fund!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

interface IndividualFeeStateInterface {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  fee: Fee!
  events: [FundEventInterface!]!
}

interface PeriodicFundStateInterface {
  id: ID!
  fund: Fund!
  start: BigInt!
  end: BigInt!
  first: FundState!
  last: FundState!
}

interface Trade {
  id: ID!
  fund: Fund!
  adapter: IntegrationAdapter!
  method: IntegrationMethod!
  timestamp: BigInt!
}

#################################################
# Enums
#################################################

enum AssetType {
  DERIVATIVE
  ETH
  USD
}

enum ChainlinkAggregatorType {
  ASSET
  ETHUSD
  CURRENCY
}

enum FeeHook {
  Continuous
  PreBuyShares
  PostBuyShares
  PreRedeemShares
}

enum PolicyHook {
  PreBuyShares
  PostBuyShares
  PreCallOnIntegration
  PostCallOnIntegration
}

enum SettlementType {
  None
  Direct
  Mint
  MintSharesOutstanding
  BurnSharesOutstanding
}

enum ShareChangeType {
  SharesBought
  SharesRedeemed
  FeeSettledForFund
  AllSharesOutstandingForcePaidForFund
  SharesOutstandingPaidForFund
}

enum IntegrationMethod {
  ADD_TRACKED_ASSETS
  TAKE_ORDER
  LEND
  REDEEM
}

#################################################
# Low-level fund event entities
#################################################

type NewFundCreatedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  comptrollerProxy: Contract!
  vaultProxy: Fund!
  creator: Account!
  fundOwner: Account!
  fundName: String!
  denominationAsset: Asset!
  sharesActionTimelock: BigInt!
  allowedBuySharesCallers: [String!]!
  feeManagerConfigData: String!
  policyManagerConfigData: String!
  transaction: Transaction!
}

type ComptrollerProxyDeployedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  comptrollerProxy: Contract!
  transaction: Transaction!
  denominationAsset: Asset!
  sharesActionTimelock: BigInt!
  allowedBuySharesCallers: [String!]!
  feeManagerConfigData: String!
  policyManagerConfigData: String!
  forMigration: Boolean!
}

type VaultProxySetEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  vaultProxy: String!
}

type SharesBoughtEvent implements EventInterface & FundEventInterface & SharesChangeInterface @entity {
  id: ID!
  fund: Fund!
  type: ShareChangeType!
  account: Account!
  investor: Account!
  contract: Contract!
  investmentState: InvestmentState!
  shares: BigDecimal!
  asset: Asset!
  investmentAmount: BigDecimal!
  sharesBought: BigDecimal!
  timestamp: BigInt!
  transaction: Transaction!
  calculations: CalculationState!
}

type SharesRedeemedEvent implements EventInterface & FundEventInterface & SharesChangeInterface @entity {
  id: ID!
  fund: Fund!
  type: ShareChangeType!
  account: Account!
  investor: Account!
  contract: Contract!
  investmentState: InvestmentState!
  shares: BigDecimal!
  payoutAssets: [Asset!]!
  payoutQuantities: [BigDecimal!]!
  timestamp: BigInt!
  transaction: Transaction!
  calculations: CalculationState!
}

type AmguPaidEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  payer: Account!
  amount: BigDecimal!
  gas: Int!
  transaction: Transaction!
}

type AssetWithdrawnEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  asset: Asset!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  target: String!
  amount: BigDecimal!
}

type TrackedAssetAddedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  asset: Asset!
  timestamp: BigInt!
  transaction: Transaction!
}

type TrackedAssetRemovedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  asset: Asset!
  timestamp: BigInt!
  transaction: Transaction!
}

type CallOnIntegrationExecutedForFundEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  adapter: IntegrationAdapter!
  selector: String!
  integrationData: String!
  incomingAssets: [Asset!]!
  incomingAssetAmounts: [BigDecimal!]!
  outgoingAssets: [Asset!]!
  outgoingAssetAmounts: [BigDecimal!]!
  timestamp: BigInt!
  transaction: Transaction!
}

type MigrationSignaledEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
}

type MigrationCancelledEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
}

type MigrationExecutedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
}

type MigrationInCancelHookFailedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  vaultProxy: String!
  prevFundDeployer: String!
  nextFundDeployer: String!
  nextVaultLib: String!
  nextVaultAccessor: String!
  failureReturnData: String!
}

type MigrationOutHookFailedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  vaultProxy: String!
  prevFundDeployer: String!
  nextFundDeployer: String!
  nextVaultLib: String!
  nextVaultAccessor: String!
  failureReturnData: String!
}

type FeeEnabledForFundEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  fee: Fee!
  comptrollerProxy: Contract!
  settingsData: Bytes!
}

type FeesRecipientSetForFundEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  prevFeesRecipient: String!
  nextFeesRecipient: String!
}

type FeeSettledForFundEvent implements EventInterface & FundEventInterface & SharesChangeInterface @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  type: ShareChangeType!
  account: Account!
  investor: Account!
  timestamp: BigInt!
  transaction: Transaction!
  investmentState: InvestmentState!
  shares: BigDecimal!
  comptrollerProxy: Contract!
  fee: Fee!
  payer: Fund!
  payee: Account!
  settlementType: SettlementType!
  sharesDue: BigDecimal!
  calculations: CalculationState!
}

type AllSharesOutstandingForcePaidForFundEvent implements EventInterface & FundEventInterface & SharesChangeInterface
  @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  type: ShareChangeType!
  account: Account!
  investor: Account!
  timestamp: BigInt!
  transaction: Transaction!
  investmentState: InvestmentState!
  shares: BigDecimal!
  comptrollerProxy: Contract!
  payee: Account!
  sharesDue: BigDecimal!
  calculations: CalculationState!
}

type SharesOutstandingPaidForFundEvent implements EventInterface & FundEventInterface & SharesChangeInterface @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  type: ShareChangeType!
  account: Account!
  investor: Account!
  timestamp: BigInt!
  transaction: Transaction!
  investmentState: InvestmentState!
  shares: BigDecimal!
  comptrollerProxy: Contract!
  fee: Fee!
  payer: Fund!
  payee: Account!
  sharesDue: BigDecimal!
  calculations: CalculationState!
}

type PolicyEnabledForFundEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  policy: Policy!
  timestamp: BigInt!
  transaction: Transaction!
}

type AccessorSetEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  prevAccessor: Contract
  nextAccessor: Contract!
  transaction: Transaction!
  timestamp: BigInt!
}

type OwnerSetEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevOwner: Account
  nextOwner: Account!
}

type MigratorSetEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevMigrator: Account
  nextMigrator: Account!
}

type VaultLibSetEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevVaultLib: Contract
  nextVaultLib: Contract!
}

type ApprovalEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  owner: String!
  spender: String!
  value: BigDecimal!
}

type TransferEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  from: String!
  to: String!
  amount: BigDecimal!
}

type AdapterBlacklistAddressesAddedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [IntegrationAdapter!]!
}

type AdapterBlacklistAddressesRemovedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [IntegrationAdapter!]!
}

type AdapterWhitelistAddressesAddedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [IntegrationAdapter!]!
}

type AdapterWhitelistAddressesRemovedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [IntegrationAdapter!]!
}

type AssetBlacklistAddressesAddedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Asset!]!
}

type AssetBlacklistAddressesRemovedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Asset!]!
}

type AssetWhitelistAddressesAddedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Asset!]!
}

type AssetWhitelistAddressesRemovedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Asset!]!
}

type InvestorWhitelistAddressesAddedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Account!]!
}

type InvestorWhitelistAddressesRemovedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Account!]!
}

type MaxConcentrationSetEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  value: BigDecimal!
}

type ManagementFeeSettingsAddedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  scaledPerSecondRate: BigInt!
}

type ManagementFeeSettledEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  sharesDue: BigDecimal!
  secondsSinceSettlement: BigInt!
}

type PerformanceFeeSettingsAddedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  rate: BigDecimal!
  period: BigInt!
}

type PerformanceFeeActivatedForFundEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  highWaterMark: BigDecimal!
}

type PerformanceFeeSharePriceUpdatedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  prevSharePrice: BigDecimal!
  nextSharePrice: BigDecimal!
}

type PerformanceFeePaidOutEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  prevHighWaterMark: BigDecimal!
  nextHighWaterMark: BigDecimal!
}

type PerformanceFeePerformanceUpdatedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  prevAggregateValueDue: BigDecimal!
  nextAggregateValueDue: BigDecimal!
  sharesOutstandingDiff: BigDecimal!
}

type EntranceRateDirectFeeSettingsAddedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  rate: BigDecimal!
}

type EntranceRateDirectFeeSettledEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  sharesQuantity: BigDecimal!
  payer: Account!
}

type EntranceRateBurnFeeSettingsAddedEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  rate: BigDecimal!
}

type EntranceRateBurnFeeSettledEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  sharesQuantity: BigDecimal!
  payer: Account!
}

type OverridePauseSetEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  overridePause: Boolean!
}

type MigratedSharesDuePaidEvent implements EventInterface & FundEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  sharesDue: BigDecimal!
}

#################################################
# Low-level network event entities
#################################################

# VaultProxyDeployedEvent is both a fund event and a network event
type VaultProxyDeployedEvent implements EventInterface & FundEventInterface & NetworkEventInterface @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  fundDeployer: Contract!
  owner: Account!
  vaultLib: Contract!
  accessor: Contract!
  fundName: String!
}

type ComptrollerLibSetEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerLib: String!
}

type AdapterRegisteredEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  integrationAdapter: IntegrationAdapter!
}

type AdapterDeregisteredEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  integrationAdapter: IntegrationAdapter!
}

type PolicyRegisteredEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  policy: Policy!
  implementedHooks: [PolicyHook!]!
}

type PolicyDeregisteredEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  policy: Policy!
}

type FundDeployerSetEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  nextFundDeployer: Contract!
  prevFundDeployer: Contract
  transaction: Transaction!
}

type AmguPriceSetEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  price: BigDecimal!
  transaction: Transaction!
}

type MlnSoldAndBurnedEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  ethAmount: BigDecimal!
  mlnAmount: BigDecimal!
  transaction: Transaction!
}

type ValueInterpreterSetEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  prevValueInterpreter: Contract
  nextValueInterpreter: Contract!
  transaction: Transaction!
}

type FrozenEtherThawedEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type AmguPaidInEtherEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type EtherTakerAddedEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  etherTaker: String!
  transaction: Transaction!
}

type EtherTakerRemovedEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  etherTaker: String!
  transaction: Transaction!
}

type OwnershipTransferredEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  previousOwner: String!
  newOwner: String!
  timestamp: BigInt!
  transaction: Transaction!
}

type DerivativeAddedEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  derivative: Asset!
  priceFeed: String!
}

type DerivativeRemovedEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  derivative: Asset!
}

type DerivativeUpdatedEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  derivative: Asset!
  prevPriceFeed: String!
  nextPriceFeed: String!
}

type AggregatorUpdatedEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  primitive: Asset!
  prevAggregator: String!
  nextAggregator: String!
}

type EthUsdAggregatorSetEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevEthUsdAggregator: String!
  nextEthUsdAggregator: String!
}

type PrimitiveAddedEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  primitive: Asset!
  priceFeed: String!
  rateAsset: Int!
}

type PrimitiveRemovedEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  primitive: Asset!
}

type StaleRateThresholdSetEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  nextStaleRateThreshold: BigInt!
  prevStaleRateThreshold: BigInt!
}

type FeeRegisteredEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  fee: Fee!
  identifier: String!
  implementedHooksForSettle: [FeeHook!]!
  implementedHooksForUpdate: [FeeHook!]!
  usesGavOnSettle: Boolean!
  usesGavOnUpdate: Boolean!
}

type FeeDeregisteredEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  fee: Fee!
  identifier: String!
}

type ChainlinkAggregatorAnswerUpdatedEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  aggregator: ChainlinkAggregator!
  timestamp: BigInt!
  transaction: Transaction!
  asset: Asset
  currency: Currency
  current: BigDecimal!
  roundId: BigInt!
  updatedAt: BigInt!
}

type MigrationTimelockSetEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevTimelock: BigInt!
  nextTimelock: BigInt!
}

type NominatedOwnerRemovedEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  nominatedOwner: String!
}

type NominatedOwnerSetEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  nominatedOwner: String!
}

type DispatcherOwnershipTransferredEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevOwner: String!
  nextOwner: String!
}

type SharesTokenSymbolSetEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  sharesTokenSymbol: String!
}

type VaultCallRegisteredEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  contractAddress: String!
  selector: String!
}

type VaultCallDeregisteredEvent implements EventInterface & NetworkEventInterface @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  contractAddress: String!
  selector: String!
}

#################################################
# High-level entities
#################################################

type Transaction @entity {
  id: ID!
  from: String!
  to: String
  contract: Contract
  value: BigDecimal!
  timestamp: BigInt!
  block: BigInt!
  gasUsed: Int!
  gasPrice: BigDecimal!
  input: String!
  account: Account
  events: [EventInterface!]! @derivedFrom(field: "transaction")
}

type Contract @entity {
  id: ID!
  name: String!
  events: [EventInterface!]! @derivedFrom(field: "contract")
}

type Fund @entity {
  id: ID!
  accessor: String!
  name: String!
  inception: BigInt!
  creator: Account!
  firstInvestment: BigInt
  release: Release!
  manager: Account!
  migrator: String
  denominationAsset: Asset!
  sharesActionTimelock: BigInt!
  allowedBuySharesCallers: [String!]!
  trackedAssets: [Asset!]!

  policies: [PolicySettingInterface!]! @derivedFrom(field: "fund")
  fees: [FeeSettingInterface!]! @derivedFrom(field: "fund")
  trades: [Trade!]! @derivedFrom(field: "fund")
  investments: [Investment!]! @derivedFrom(field: "fund")
  sharesChanges: [SharesChangeInterface!]! @derivedFrom(field: "fund")

  # Fund State
  shares: ShareState!
  sharesHistory: [ShareState!]! @derivedFrom(field: "fund")
  portfolio: PortfolioState!
  portfolioHistory: [PortfolioState!]! @derivedFrom(field: "fund")
  feeState: FeeState!
  feeStateHistory: [FeeState!]! @derivedFrom(field: "fund")
  calculations: CalculationState!
  calculationsHistory: [CalculationState!]! @derivedFrom(field: "fund")
  state: FundState!
  stateHistory: [FundState!]! @derivedFrom(field: "fund")

  # periodic states
  hourlyStates: [HourlyFundState!]! @derivedFrom(field: "fund")
  dailyStates: [DailyFundState!]! @derivedFrom(field: "fund")
  monthlyStates: [MonthlyFundState!]! @derivedFrom(field: "fund")

  events: [FundEventInterface!]! @derivedFrom(field: "fund")
  migrations: [Migration!] @derivedFrom(field: "fund")
}

type HourlyFundState implements PeriodicFundStateInterface @entity {
  id: ID!
  fund: Fund!
  start: BigInt!
  end: BigInt!
  first: FundState!
  last: FundState!
}

type DailyFundState implements PeriodicFundStateInterface @entity {
  id: ID!
  fund: Fund!
  start: BigInt!
  end: BigInt!
  first: FundState!
  last: FundState!
}

type MonthlyFundState implements PeriodicFundStateInterface @entity {
  id: ID!
  fund: Fund!
  start: BigInt!
  end: BigInt!
  first: FundState!
  last: FundState!
}

type Migration @entity {
  id: ID!
  prevRelease: Release!
  nextRelease: Release!
  fund: Fund!
  signalTimestamp: BigInt!
  executed: Boolean!
  cancelled: Boolean!
  nextAccessor: String!
}

type Release @entity {
  id: ID!
  current: Boolean!
  open: BigInt!
  close: BigInt
  funds: [Fund!] @derivedFrom(field: "release")
}

type Account @entity {
  id: ID!
  firstSeen: BigInt!
  manager: Boolean!
  managements: [Fund!]! @derivedFrom(field: "manager")
  investor: Boolean!
  investments: [Investment!]! @derivedFrom(field: "investor")
  sharesChanges: [SharesChangeInterface!]! @derivedFrom(field: "investor")
  events: [FundEventInterface!]! @derivedFrom(field: "account")
  transactions: [Transaction!]! @derivedFrom(field: "account")
}

type Investment @entity {
  id: ID!
  fund: Fund!
  investor: Account!
  shares: BigDecimal!
  state: InvestmentState!
  stateHistory: [InvestmentState!]! @derivedFrom(field: "investment")
}

type InvestmentState @entity {
  id: ID!
  timestamp: BigInt!
  fund: Fund!
  investor: Account!
  investment: Investment!
  shares: BigDecimal!
  changes: [SharesChangeInterface!]! @derivedFrom(field: "investmentState")
}

type Fee @entity {
  id: ID!
  identifier: String!
  funds: [Fund!]!
}

type ManagementFeeSetting implements FeeSettingInterface @entity {
  id: ID!
  fee: Fee!
  fund: Fund!
  scaledPerSecondRate: BigInt!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

type PerformanceFeeSetting implements FeeSettingInterface @entity {
  id: ID!
  fee: Fee!
  fund: Fund!
  rate: BigDecimal!
  period: BigInt!
  activated: BigInt!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

type EntranceRateDirectFeeSetting implements FeeSettingInterface @entity {
  id: ID!
  fee: Fee!
  fund: Fund!
  rate: BigDecimal!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

type EntranceRateBurnFeeSetting implements FeeSettingInterface @entity {
  id: ID!
  fee: Fee!
  fund: Fund!
  rate: BigDecimal!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

type IntegrationAdapter @entity {
  id: ID!
  identifier: String!
}

type Policy @entity {
  id: ID!
  identifier: String!
  funds: [Fund!]!
  settings: [PolicySettingInterface!]! @derivedFrom(field: "policy")
}

type AdapterBlacklistSetting implements PolicySettingInterface @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [String!]!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

type AdapterWhitelistSetting implements PolicySettingInterface @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [String!]!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

type AssetBlacklistSetting implements PolicySettingInterface @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [String!]!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

type AssetWhitelistSetting implements PolicySettingInterface @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [String!]!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

type InvestorWhitelistSetting implements PolicySettingInterface @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [Account!]!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

type MaxConcentrationSetting implements PolicySettingInterface @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  maxConcentration: BigDecimal!
  timestamp: BigInt!
  events: [FundEventInterface!]!
}

type ShareState implements FundStateInterface @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  totalSupply: BigDecimal!
  outstandingForFees: BigDecimal!
  events: [FundEventInterface!]!
}

type PortfolioState implements FundStateInterface @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  holdings: [HoldingState!]!
  events: [FundEventInterface!]!
}

type HoldingState implements FundStateInterface @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  asset: Asset!
  price: AssetPrice
  quantity: BigDecimal!
  events: [FundEventInterface!]!
}

type CalculationState implements FundStateInterface @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  gav: BigDecimal!
  totalSupply: BigDecimal!
  grossSharePrice: BigDecimal!
  netSharePrice: BigDecimal!
  events: [FundEventInterface!]!
}

type FundState implements FundStateInterface @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  shares: ShareState!
  portfolio: PortfolioState!
  feeState: FeeState!
  calculations: CalculationState!
  events: [FundEventInterface!]!
}

type FeeState implements FundStateInterface @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  feeStates: [IndividualFeeStateInterface!]!
  events: [FundEventInterface!]!
}

type ManagementFeeState implements FundStateInterface & IndividualFeeStateInterface @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  fee: Fee!
  lastSettled: BigInt!
  totalSharesPaidOut: BigDecimal!
  events: [FundEventInterface!]!
}

type PerformanceFeeState implements FundStateInterface & IndividualFeeStateInterface @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  fee: Fee!
  lastPaid: BigInt!
  grossSharePrice: BigDecimal!
  aggregateValueDue: BigDecimal!
  highWaterMark: BigDecimal!
  sharesOutstanding: BigDecimal!
  events: [FundEventInterface!]!
}

type EntranceRateDirectFeeState implements FundStateInterface & IndividualFeeStateInterface @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  fee: Fee!
  lastSettled: BigInt!
  events: [FundEventInterface!]!
}

type EntranceRateBurnFeeState implements FundStateInterface & IndividualFeeStateInterface @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  fee: Fee!
  lastSettled: BigInt!
  events: [FundEventInterface!]!
}

type TokenSwapTrade implements Trade @entity {
  id: ID!
  fund: Fund!
  adapter: IntegrationAdapter!
  method: IntegrationMethod!
  incomingAsset: Asset!
  incomingAssetAmount: BigDecimal!
  outgoingAsset: Asset!
  outgoingAssetAmount: BigDecimal!
  price: BigDecimal!
  timestamp: BigInt!
}

type MultiTokenSwapTrade implements Trade @entity {
  id: ID!
  fund: Fund!
  adapter: IntegrationAdapter!
  method: IntegrationMethod!
  incomingAssets: [Asset!]!
  incomingAssetAmounts: [BigDecimal!]!
  outgoingAssets: [Asset!]!
  outgoingAssetAmounts: [BigDecimal!]!
  timestamp: BigInt!
}

type LendTrade implements Trade @entity {
  id: ID!
  fund: Fund!
  adapter: IntegrationAdapter!
  method: IntegrationMethod!
  incomingAsset: Asset!
  incomingAssetAmount: BigDecimal!
  outgoingAsset: Asset!
  outgoingAssetAmount: BigDecimal!
  price: BigDecimal!
  timestamp: BigInt!
}

type MultiLendTrade implements Trade @entity {
  id: ID!
  fund: Fund!
  adapter: IntegrationAdapter!
  method: IntegrationMethod!
  incomingAssets: [Asset!]!
  incomingAssetAmounts: [BigDecimal!]!
  outgoingAssets: [Asset!]!
  outgoingAssetAmounts: [BigDecimal!]!
  timestamp: BigInt!
}

type RedeemTrade implements Trade @entity {
  id: ID!
  fund: Fund!
  adapter: IntegrationAdapter!
  method: IntegrationMethod!
  incomingAssets: [Asset!]!
  incomingAssetAmounts: [BigDecimal!]!
  outgoingAssets: [Asset!]!
  outgoingAssetAmounts: [BigDecimal!]!
  timestamp: BigInt!
}

type MultiRedeemTrade implements Trade @entity {
  id: ID!
  fund: Fund!
  adapter: IntegrationAdapter!
  method: IntegrationMethod!
  incomingAssets: [Asset!]!
  incomingAssetAmounts: [BigDecimal!]!
  outgoingAssets: [Asset!]!
  outgoingAssetAmounts: [BigDecimal!]!
  timestamp: BigInt!
}

type AddTrackedAssetsTrade implements Trade @entity {
  id: ID!
  fund: Fund!
  adapter: IntegrationAdapter!
  method: IntegrationMethod!
  trackedAssets: [Asset!]!
  timestamp: BigInt!
}

#################################################
# Assets and prices
#################################################

type Asset @entity {
  id: ID!
  ref: String!
  name: String!
  symbol: String!
  decimals: Int!
  type: AssetType!

  # Details for certain derivative assets
  uniswapV2PoolAssetDetail: UniswapV2PoolAssetDetail
  compoundAssetDetail: CompoundAssetDetails

  # Latest price and candles
  price: AssetPrice
  hourly: HourlyAssetPriceCandle
  daily: DailyAssetPriceCandle
  monthly: MonthlyAssetPriceCandle

  # Historical prices and candles
  priceHistory: [AssetPrice!]! @derivedFrom(field: "asset")
  hourlyHistory: [HourlyAssetPriceCandle!]! @derivedFrom(field: "asset")
  dailyHistory: [DailyAssetPriceCandle!]! @derivedFrom(field: "asset")
  monthlyHistory: [MonthlyAssetPriceCandle!]! @derivedFrom(field: "asset")

  # Fund references
  denominatedFunds: [Fund!]! @derivedFrom(field: "denominationAsset")
  trackingFunds: [Fund!]! @derivedFrom(field: "trackedAssets")
}

type Currency @entity {
  id: ID!

  # Latest price and candles
  price: CurrencyPrice
  hourly: HourlyCurrencyPriceCandle
  daily: DailyCurrencyPriceCandle
  monthly: MonthlyCurrencyPriceCandle

  # Historical prices and candles
  priceHistory: [CurrencyPrice!]! @derivedFrom(field: "currency")
  hourlyHistory: [HourlyCurrencyPriceCandle!]! @derivedFrom(field: "currency")
  dailyHistory: [DailyCurrencyPriceCandle!]! @derivedFrom(field: "currency")
  monthlyHistory: [MonthlyCurrencyPriceCandle!]! @derivedFrom(field: "currency")
}

type UniswapV2PoolAssetDetail @entity {
  id: ID!
  token0: Asset!
  token1: Asset!
}

type CompoundAssetDetails @entity {
  id: ID!
  underlying: Asset!
}

type AssetPrice @entity {
  id: ID!
  asset: Asset!
  price: BigDecimal!
  timestamp: BigInt!
}

type CurrencyPrice @entity {
  id: ID!
  currency: Currency!
  price: BigDecimal!
  timestamp: BigInt!
}

type HourlyAssetPriceCandle @entity {
  id: ID!
  asset: Asset!
  group: HourlyPriceCandleGroup!
  from: BigInt!
  to: BigInt!
  open: BigDecimal!
  openRef: AssetPrice!
  close: BigDecimal!
  closeRef: AssetPrice!
  low: BigDecimal!
  lowRef: AssetPrice!
  high: BigDecimal!
  highRef: AssetPrice!
}

type DailyAssetPriceCandle @entity {
  id: ID!
  asset: Asset!
  group: DailyPriceCandleGroup!
  from: BigInt!
  to: BigInt!
  open: BigDecimal!
  openRef: AssetPrice!
  close: BigDecimal!
  closeRef: AssetPrice!
  low: BigDecimal!
  lowRef: AssetPrice!
  high: BigDecimal!
  highRef: AssetPrice!
}

type MonthlyAssetPriceCandle @entity {
  id: ID!
  asset: Asset!
  group: MonthlyPriceCandleGroup!
  from: BigInt!
  to: BigInt!
  open: BigDecimal!
  openRef: AssetPrice!
  close: BigDecimal!
  closeRef: AssetPrice!
  low: BigDecimal!
  lowRef: AssetPrice!
  high: BigDecimal!
  highRef: AssetPrice!
}

type HourlyCurrencyPriceCandle @entity {
  id: ID!
  currency: Currency!
  group: HourlyPriceCandleGroup!
  from: BigInt!
  to: BigInt!
  open: BigDecimal!
  openRef: CurrencyPrice!
  close: BigDecimal!
  closeRef: CurrencyPrice!
  low: BigDecimal!
  lowRef: CurrencyPrice!
  high: BigDecimal!
  highRef: CurrencyPrice!
}

type DailyCurrencyPriceCandle @entity {
  id: ID!
  currency: Currency!
  group: DailyPriceCandleGroup!
  from: BigInt!
  to: BigInt!
  open: BigDecimal!
  openRef: CurrencyPrice!
  close: BigDecimal!
  closeRef: CurrencyPrice!
  low: BigDecimal!
  lowRef: CurrencyPrice!
  high: BigDecimal!
  highRef: CurrencyPrice!
}

type MonthlyCurrencyPriceCandle @entity {
  id: ID!
  currency: Currency!
  group: MonthlyPriceCandleGroup!
  from: BigInt!
  to: BigInt!
  open: BigDecimal!
  openRef: CurrencyPrice!
  close: BigDecimal!
  closeRef: CurrencyPrice!
  low: BigDecimal!
  lowRef: CurrencyPrice!
  high: BigDecimal!
  highRef: CurrencyPrice!
}

type HourlyPriceCandleGroup @entity {
  id: ID!
  from: BigInt!
  to: BigInt!
  assetCandles: [HourlyAssetPriceCandle!]! @derivedFrom(field: "group")
  currencyCandles: [HourlyCurrencyPriceCandle!]! @derivedFrom(field: "group")
}

type DailyPriceCandleGroup @entity {
  id: ID!
  from: BigInt!
  to: BigInt!
  assetCandles: [DailyAssetPriceCandle!]! @derivedFrom(field: "group")
  currencyCandles: [DailyCurrencyPriceCandle!]! @derivedFrom(field: "group")
}

type MonthlyPriceCandleGroup @entity {
  id: ID!
  from: BigInt!
  to: BigInt!
  assetCandles: [MonthlyAssetPriceCandle!]! @derivedFrom(field: "group")
  currencyCandles: [MonthlyCurrencyPriceCandle!]! @derivedFrom(field: "group")
}

type ChainlinkAggregator @entity {
  id: ID!
  type: ChainlinkAggregatorType!
  asset: Asset
  currency: Currency
  active: Boolean!
  updates: [ChainlinkAggregatorAnswerUpdatedEvent!]! @derivedFrom(field: "aggregator")
}

# Knowing the timestamp of the most recent update allows us to create missing
# candles / fill gaps and decide when to re-fetch prices for our derivatives.
# Every time a new hour / day is started (checked with modulo based
# on the timestamp), we create new group entities and also fill gaps in the
# candles. We can always load the most recent candles because we know the
# when it was most recently updated.
type Cron @entity {
  id: ID!

  # The last time that cron was triggered.
  cron: BigInt!

  # The currently tracked primitives. This is used to know which assets we
  # need to maintain candles for.
  primitives: [Asset!]!

  # Asset with prices quoted in USD
  usdQuotedPrimitives: [Asset!]!

  # The currently tracked derivatives. This is used to know which derivatives
  # to fetch prices for (as a side effect, because they don't have a dedicated
  # price oracle that emits events on their behalf) and to update their candles.
  derivatives: [Asset!]!

  #
  currencies: [Currency!]!
}
