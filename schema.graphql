type Contract @entity {
  id: ID!
  name: String!
  creationTime: BigInt!
  creationBlock: BigInt!
  parent: Contract
  children: [Contract!] @derivedFrom(field: "parent")
}

type State @entity {
  id: ID!
  lastCalculation: BigInt!
  activeFunds: BigInt!
  nonActiveFunds: BigInt!
  timestampFundCount: BigInt!
  numberOfInvestors: BigInt!
  timestamptNumberOfInvestors: BigInt!
}

type Registry @entity {
  id: ID!
  engine: Engine
  assets: [Asset!]!
  exchangeAdapters: [ExchangeAdapter!]!
  versions: [Version!]! @derivedFrom(field: "registry")
  priceSources: [PriceSource!]! @derivedFrom(field: "registry")
  mlnTokens: [MlnToken!]! @derivedFrom(field: "registry")
  nativeAssets: [NativeAsset!]! @derivedFrom(field: "registry")
  funds: [Fund!]! @derivedFrom(field: "registry")
}

type Version @entity {
  id: ID!
  registry: Registry
  funds: [Fund!]! @derivedFrom(field: "version")
}

type Engine @entity {
  id: ID!
  registry: Registry
  amguPrices: [AmguPrice!]! @derivedFrom(field: "engine")
  amguPayments: [AmguPayment!]! @derivedFrom(field: "engine")
  etherThawings: [ThawEther!]! @derivedFrom(field: "engine")
  etherBurnings: [BurnEther!]! @derivedFrom(field: "engine")
}

type PriceSource @entity {
  id: ID!
  registry: Registry!
}

type MlnToken @entity {
  id: ID!
  registry: Registry!
}

type NativeAsset @entity {
  id: ID!
  registry: Registry!
}

type AmguPrice @entity {
  id: ID!
  engine: Engine!
  price: BigInt!
  timestamp: BigInt!
}

type AmguPayment @entity {
  id: ID!
  engine: Engine!
  amount: BigInt!
  timestamp: BigInt!
}

type ThawEther @entity {
  id: ID!
  engine: Engine!
  ether: BigInt!
  timestamp: BigInt!
}

type BurnEther @entity {
  id: ID!
  engine: Engine!
  ether: BigInt!
  timestamp: BigInt!
}

type Asset @entity {
  id: ID!
  decimals: Int!
  symbol: String!
  name: String!
  url: String!
  reserveMin: BigInt!
  registry: Registry
  price: BigInt
  priceUpdates: [AssetPriceUpdate!]! @derivedFrom(field: "asset")
  lastPriceUpdate: BigInt
}

type AssetPriceUpdate @entity {
  id: ID!
  asset: Asset!
  price: BigInt!
  timestamp: BigInt!
}

type ExchangeAdapter @entity {
  id: ID!
  exchange: String!
  takesCustody: Boolean!
  sigs: String
  registry: Registry
}

type Fund @entity {
  id: ID!
  name: String!
  manager: FundManager!
  creationTime: BigInt!
  isShutdown: Boolean!
  shutDownTime: BigInt
  accounting: Accounting!
  participation: Participation!
  feeManager: FeeManager!
  policyManager: PolicyManager!
  shares: Shares!
  trading: Trading!
  vault: Vault!
  registry: Registry!
  version: Version!
  engine: Engine!
  gav: BigInt
  feesInDenominationAsset: BigInt
  feesInShares: BigInt
  nav: BigInt
  sharePrice: BigInt
  gavPerShareNetManagementFee: BigInt
  allocatedFees: BigInt
  totalSupply: BigInt
  investments: [Investment!]! @derivedFrom(field: "fund")
  calculationsHistory: [FundCalculationsHistory!]! @derivedFrom(field: "fund")
  investmentHistory: [InvestmentHistory!]! @derivedFrom(field: "fund")
  holdingsHistory: [FundHoldingsHistory!]! @derivedFrom(field: "fund")
  lastCalculationsUpdate: BigInt
}

type FundManager @entity {
  id: ID!
  funds: [Fund!]! @derivedFrom(field: "manager")
}

type FundCalculationsHistory @entity {
  id: ID!
  fund: Fund!
  gav: BigInt!
  feesInDenominationAsset: BigInt
  feesInShares: BigInt
  nav: BigInt
  sharePrice: BigInt
  gavPerShareNetManagementFee: BigInt
  allocatedFees: BigInt
  totalSupply: BigInt
  timestamp: BigInt!
}

type FundCount @entity {
  id: ID!
  active: BigInt!
  nonActive: BigInt!
  timestamp: BigInt!
}

type InvestorCount @entity {
  id: ID!
  numberOfInvestors: BigInt!
  timestamp: BigInt!
}

type Accounting @entity {
  id: ID!
  fund: Fund!
  demoniationAsset: Asset!
  nativeAsset: Asset!
  ownedAssets: [Asset!]!
}

type Participation @entity {
  id: ID!
  fund: Fund!
  allowedAssets: [Asset!]!
  investmentRequests: [InvestmentRequest!]!
}

type FeeManager @entity {
  id: ID!
  fund: Fund!
  managementFee: ManagementFee
  performanceFee: PerformanceFee
  totalFeeReward: BigInt!
  feeRewardHistory: [FeeRewardHistory!]! @derivedFrom(field: "feeManager")
}

type ManagementFee @entity {
  id: ID!
  feeManager: FeeManager!
  managementFeeRate: BigInt
  lastPayoutTime: BigInt
}

type PerformanceFee @entity {
  id: ID!
  feeManager: FeeManager!
  performanceFeeRate: BigInt
  performanceFeePeriod: BigInt
  lastPayoutTime: BigInt
  initializeTime: BigInt
  highWaterMark: BigInt
}

type FeeRewardHistory @entity {
  id: ID!
  feeManager: FeeManager!
  shares: BigInt!
  timestamp: BigInt!
}

type PolicyManager @entity {
  id: ID!
  fund: Fund!
}

type Policy @entity {
  id: ID!
  signature: String!
  position: Int!
  policy: String!
}

type Shares @entity {
  id: ID!
  fund: Fund!
}

type Trading @entity {
  id: ID!
  fund: Fund!
}

type Vault @entity {
  id: ID!
  fund: Fund!
}

# TODO: Add mappings.
type InvestmentRequest @entity {
  id: ID!
  fund: Fund!
}

type Investor @entity {
  id: ID!
  valuationHistory: [InvestorValuationHistory!]! @derivedFrom(field: "owner")
  investments: [Investment!]! @derivedFrom(field: "owner")
  investmentHistory: [InvestmentHistory!]! @derivedFrom(field: "owner")
}

type Investment @entity {
  id: ID!
  fund: Fund!
  owner: Investor!
  shares: BigInt!
  sharePrice: BigInt!
  gav: BigInt!
  nav: BigInt!
  history: [InvestmentHistory!]! @derivedFrom(field: "investment")
  valuationHistory: [InvestmentValuationHistory!]!
    @derivedFrom(field: "investment")
}

type InvestmentValuationHistory @entity {
  id: ID!
  investment: Investment!
  gav: BigInt!
  nav: BigInt!
  sharePrice: BigInt!
  timestamp: BigInt!
}

type InvestorValuationHistory @entity {
  id: ID!
  owner: Investor!
  gav: BigInt!
  nav: BigInt!
  timestamp: BigInt!
}

type InvestmentHistory @entity {
  id: ID!
  timestamp: BigInt!
  investment: Investment!
  owner: Investor!
  fund: Fund!
  action: String!
  shares: BigInt!
  sharePrice: BigInt!
}

type FundHoldingsHistory @entity {
  id: ID!
  timestamp: BigInt!
  fund: Fund!
  asset: Asset!
  holding: BigInt!
}

type NetworkValue @entity {
  id: ID!
  timestamp: BigInt!
  gav: BigInt!
}

type ExchangeMethodCall @entity {
  id: ID!
  exchange: String
  methodSignature: String
  orderAddress1: String
  orderAddress2: String
  orderAddress3: String
  orderAddress4: String
  orderAddress5: String
  orderAddress6: String
  orderValue1: BigInt
  orderValue2: BigInt
  orderValue3: BigInt
  orderValue4: BigInt
  orderValue5: BigInt
  orderValue6: BigInt
  orderValue7: BigInt
  orderValue8: BigInt
  identifier: String
  makerAssetData: String
  takerAssetData: String
  signature: String
}
