#################################################
# Interfaces
#################################################

interface IEvent {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface INetworkEvent {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface IFundEvent {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
}

interface ISharesChange {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  investmentState: InvestmentState!
  shares: BigDecimal!
  transaction: Transaction!
}

interface IFundState {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

interface IFeeSetting {
  id: ID!
  fee: Fee!
  fund: Fund!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

interface IPolicySetting {
  id: ID!
  policy: Policy!
  fund: Fund!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

interface IIndividualFeeState {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  fee: Fee!
  events: [IFundEvent!]!
}

interface IPeriodicFundState {
  id: ID!
  fund: Fund!
  start: BigInt!
  end: BigInt!
  first: FundState!
  last: FundState!
}

#################################################
# Enums
#################################################

enum AssetType {
  DERIVATIVE
  ETH
  USD
}

enum ChainlinkAggregatorType {
  ASSET
  ETHUSD
}

enum FeeHook {
  Continuous
  PreBuyShares
  PostBuyShares
  PreRedeemShares
}

enum PolicyHook {
  PreBuyShares
  PostBuyShares
  PreCallOnIntegration
  PostCallOnIntegration
}

enum SettlementType {
  None
  Direct
  Mint
  MintSharesOutstanding
  BurnSharesOutstanding
}

#################################################
# Low-level fund event entities
#################################################

type NewFundCreatedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  comptrollerProxy: Contract!
  vaultProxy: Fund!
  creator: Account!
  fundOwner: Account!
  fundName: String!
  denominationAsset: Asset!
  sharesActionTimelock: BigInt!
  allowedBuySharesCallers: [String!]!
  feeManagerConfigData: String!
  policyManagerConfigData: String!
  transaction: Transaction!
}

type ComptrollerProxyDeployedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  comptrollerProxy: Contract!
  transaction: Transaction!
  denominationAsset: Asset!
  sharesActionTimelock: BigInt!
  allowedBuySharesCallers: [String!]!
  feeManagerConfigData: String!
  policyManagerConfigData: String!
  forMigration: Boolean!
}

type VaultProxySetEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  vaultProxy: String!
}

type SharesBoughtEvent implements IEvent & IFundEvent & ISharesChange @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  investor: Account!
  investmentState: InvestmentState!
  shares: BigDecimal!
  asset: Asset!
  investmentAmount: BigDecimal!
  sharesBought: BigDecimal!
  timestamp: BigInt!
  transaction: Transaction!
}

type SharesRedeemedEvent implements IEvent & IFundEvent & ISharesChange @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  investor: Account!
  investmentState: InvestmentState!
  shares: BigDecimal!
  payoutAssets: [Asset!]!
  payoutQuantities: [BigDecimal!]!
  timestamp: BigInt!
  transaction: Transaction!
}

type AmguPaidEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  payer: Account!
  amount: BigDecimal!
  gas: Int!
  transaction: Transaction!
}

type AssetWithdrawnEvent implements IEvent & IFundEvent @entity {
  id: ID!
  asset: Asset!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  target: String!
  amount: BigDecimal!
}

type TrackedAssetAddedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  asset: Asset!
  timestamp: BigInt!
  transaction: Transaction!
}

type TrackedAssetRemovedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  asset: Asset!
  timestamp: BigInt!
  transaction: Transaction!
}

type CallOnIntegrationExecutedForFundEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  adapter: String!
  incomingAssets: [Asset!]!
  incomingAssetAmounts: [BigDecimal!]!
  outgoingAssets: [Asset!]!
  outgoingAssetAmounts: [BigDecimal!]!
  timestamp: BigInt!
  transaction: Transaction!
}

type MigrationSignaledEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
}

type MigrationCancelledEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
}

type MigrationExecutedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  migration: Migration!
  signalTimestamp: BigInt!
}

type MigrationInCancelHookFailedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  vaultProxy: String!
  prevFundDeployer: String!
  nextFundDeployer: String!
  nextVaultLib: String!
  nextVaultAccessor: String!
  failureReturnData: String!
}

type MigrationOutHookFailedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  vaultProxy: String!
  prevFundDeployer: String!
  nextFundDeployer: String!
  nextVaultLib: String!
  nextVaultAccessor: String!
  failureReturnData: String!
}

type FeeEnabledForFundEvent implements IEvent & IFundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  fee: Fee!
  comptrollerProxy: Contract!
  settingsData: Bytes!
}

type FeesRecipientSetForFundEvent implements IEvent & IFundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  prevFeesRecipient: String!
  nextFeesRecipient: String!
}

type FeeSettledForFundEvent implements IEvent & IFundEvent & ISharesChange @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  investmentState: InvestmentState!
  shares: BigDecimal!
  comptrollerProxy: Contract!
  fee: Fee!
  payer: Fund!
  payee: Account!
  settlementType: SettlementType!
  sharesDue: BigDecimal!
}

type AllSharesOutstandingForcePaidForFundEvent implements IEvent & IFundEvent & ISharesChange @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  investmentState: InvestmentState!
  shares: BigDecimal!
  comptrollerProxy: Contract!
  payee: Account!
  sharesDue: BigDecimal!
}

type SharesOutstandingPaidForFundEvent implements IEvent & IFundEvent & ISharesChange @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  timestamp: BigInt!
  transaction: Transaction!
  investmentState: InvestmentState!
  shares: BigDecimal!
  comptrollerProxy: Contract!
  fee: Fee!
  payer: Fund!
  payee: Account!
  sharesDue: BigDecimal!
}

type PolicyEnabledForFundEvent implements IEvent & IFundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  policy: Policy!
  timestamp: BigInt!
  transaction: Transaction!
}

type AccessorSetEvent implements IEvent & IFundEvent @entity {
  id: ID!
  contract: Contract!
  fund: Fund!
  account: Account!
  prevAccessor: Contract
  nextAccessor: Contract!
  transaction: Transaction!
  timestamp: BigInt!
}

type OwnerSetEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevOwner: Account
  nextOwner: Account!
}

type MigratorSetEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevMigrator: Account
  nextMigrator: Account!
}

type VaultLibSetEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevVaultLib: Contract
  nextVaultLib: Contract!
}

type ApprovalEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  owner: String!
  spender: String!
  value: BigDecimal!
}

type TransferEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  from: String!
  to: String!
  amount: BigDecimal!
}

type AdapterBlacklistAddressesAddedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [IntegrationAdapter!]!
}

type AdapterBlacklistAddressesRemovedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [IntegrationAdapter!]!
}

type AdapterWhitelistAddressesAddedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [IntegrationAdapter!]!
}

type AdapterWhitelistAddressesRemovedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [IntegrationAdapter!]!
}

type AssetBlacklistAddressesAddedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Asset!]!
}

type AssetBlacklistAddressesRemovedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Asset!]!
}

type AssetWhitelistAddressesAddedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Asset!]!
}

type AssetWhitelistAddressesRemovedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Asset!]!
}

type InvestorWhitelistAddressesAddedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Account!]!
}

type InvestorWhitelistAddressesRemovedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  items: [Account!]!
}

type MaxConcentrationSetEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  value: BigDecimal!
}

type ManagementFeeSettingsAddedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  rate: BigDecimal!
}

type ManagementFeeSettledEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  sharesDue: BigDecimal!
  prevSettled: BigInt!
}

type PerformanceFeeSettingsAddedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  rate: BigDecimal!
  period: BigInt!
}

type PerformanceFeeActivatedForFundEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  highWaterMark: BigDecimal!
}

type PerformanceFeeSharePriceUpdatedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  prevSharePrice: BigDecimal!
  nextSharePrice: BigDecimal!
}

type PerformanceFeePaidOutEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  prevHighWaterMark: BigDecimal!
  nextHighWaterMark: BigDecimal!
}

type PerformanceFeePerformanceUpdatedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  prevAggregateValueDue: BigDecimal!
  nextAggregateValueDue: BigDecimal!
  sharesOutstandingDiff: BigDecimal!
}

type EntranceRateDirectFeeSettingsAddedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  rate: BigDecimal!
}

type EntranceRateDirectFeeSettledEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  sharesQuantity: BigDecimal!
  payer: Account!
}

type EntranceRateBurnFeeSettingsAddedEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  rate: BigDecimal!
}

type EntranceRateBurnFeeSettledEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerProxy: Contract!
  sharesQuantity: BigDecimal!
  payer: Account!
}

type OverridePauseSetEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  overridePause: Boolean!
}

type MigratedSharesDuePaidEvent implements IEvent & IFundEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  sharesDue: BigDecimal!
}

#################################################
# Low-level network event entities
#################################################

# VaultProxyDeployedEvent is both a fund event and a network event
type VaultProxyDeployedEvent implements IEvent & IFundEvent & INetworkEvent @entity {
  id: ID!
  fund: Fund!
  account: Account!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  fundDeployer: Contract!
  owner: Account!
  vaultLib: Contract!
  accessor: Contract!
  fundName: String!
}

type ComptrollerLibSetEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  comptrollerLib: String!
}

type AdapterRegisteredEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  integrationAdapter: IntegrationAdapter!
}

type AdapterDeregisteredEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  integrationAdapter: IntegrationAdapter!
}

type PolicyRegisteredEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  policy: Policy!
  implementedHooks: [PolicyHook!]!
}

type PolicyDeregisteredEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  identifier: String!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  policy: Policy!
}

type FundDeployerSetEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  nextFundDeployer: Contract!
  prevFundDeployer: Contract
  transaction: Transaction!
}

type AmguPriceSetEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  price: BigDecimal!
  transaction: Transaction!
}

type MlnSoldAndBurnedEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  ethAmount: BigDecimal!
  mlnAmount: BigDecimal!
  transaction: Transaction!
}

type ValueInterpreterSetEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  prevValueInterpreter: Contract
  nextValueInterpreter: Contract!
  transaction: Transaction!
}

type FrozenEtherThawedEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type AmguPaidInEtherEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  amount: BigDecimal!
  transaction: Transaction!
}

type EtherTakerAddedEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  etherTaker: String!
  transaction: Transaction!
}

type EtherTakerRemovedEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  etherTaker: String!
  transaction: Transaction!
}

type OwnershipTransferredEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  previousOwner: String!
  newOwner: String!
  timestamp: BigInt!
  transaction: Transaction!
}

type DerivativeAddedEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  derivative: Asset!
  priceFeed: String!
}

type DerivativeRemovedEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  derivative: Asset!
}

type DerivativeUpdatedEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  derivative: Asset!
  prevPriceFeed: String!
  nextPriceFeed: String!
}

type AggregatorUpdatedEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  primitive: Asset!
  prevAggregator: String!
  nextAggregator: String!
}

type EthUsdAggregatorSetEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevEthUsdAggregator: String!
  nextEthUsdAggregator: String!
}

type PrimitiveAddedEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  primitive: Asset!
  priceFeed: String!
  rateAsset: Int!
}

type PrimitiveRemovedEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  primitive: Asset!
}

type StaleRateThresholdSetEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  nextStaleRateThreshold: BigInt!
  prevStaleRateThreshold: BigInt!
}

type FeeRegisteredEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  fee: Fee!
  identifier: String!
  implementedHooksForSettle: [FeeHook!]!
  implementedHooksForUpdate: [FeeHook!]!
  usesGavOnSettle: Boolean!
  usesGavOnUpdate: Boolean!
}

type FeeDeregisteredEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  fee: Fee!
  identifier: String!
}

type ChainlinkAggregatorAnswerUpdatedEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  aggregator: ChainlinkAggregator!
  timestamp: BigInt!
  transaction: Transaction!
  asset: Asset
  current: BigDecimal!
  roundId: BigInt!
  updatedAt: BigInt!
}

type MigrationTimelockSetEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevTimelock: BigInt!
  nextTimelock: BigInt!
}

type NominatedOwnerRemovedEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  nominatedOwner: String!
}

type NominatedOwnerSetEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  nominatedOwner: String!
}

type DispatcherOwnershipTransferredEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  prevOwner: String!
  nextOwner: String!
}

type SharesTokenSymbolSetEvent implements IEvent & INetworkEvent @entity {
  id: ID!
  contract: Contract!
  timestamp: BigInt!
  transaction: Transaction!
  sharesTokenSymbol: String!
}

#################################################
# High-level entities
#################################################

type Transaction @entity {
  id: ID!
  from: String!
  to: String
  contract: Contract
  value: BigDecimal!
  timestamp: BigInt!
  block: BigInt!
  gasUsed: Int!
  gasPrice: BigDecimal!
  input: String!
  events: [IEvent!]! @derivedFrom(field: "transaction")
}

type Contract @entity {
  id: ID!
  name: String!
  events: [IEvent!]! @derivedFrom(field: "contract")
}

type Fund @entity {
  id: ID!
  accessor: String!
  name: String!
  inception: BigInt!
  creator: Account!
  firstInvestment: BigInt
  release: Release!
  manager: Account!
  migrator: String
  denominationAsset: Asset!
  sharesActionTimelock: BigInt!
  allowedBuySharesCallers: [String!]!
  trackedAssets: [Asset!]!

  policies: [IPolicySetting!]! @derivedFrom(field: "fund")
  fees: [IFeeSetting!]! @derivedFrom(field: "fund")
  trades: [Trade!]! @derivedFrom(field: "fund")
  investments: [Investment!]! @derivedFrom(field: "fund")

  # Fund State
  shares: ShareState!
  sharesHistory: [ShareState!]! @derivedFrom(field: "fund")
  portfolio: PortfolioState!
  portfolioHistory: [PortfolioState!]! @derivedFrom(field: "fund")
  feeState: FeeState!
  feeStateHistory: [FeeState!]! @derivedFrom(field: "fund")
  calculations: CalculationState!
  calculationsHistory: [CalculationState!]! @derivedFrom(field: "fund")
  state: FundState!
  stateHistory: [FundState!]! @derivedFrom(field: "fund")

  # periodic states
  hourlyState: [HourlyFundState!]! @derivedFrom(field: "fund")
  dailyState: [DailyFundState!]! @derivedFrom(field: "fund")

  events: [IFundEvent!]! @derivedFrom(field: "fund")
  migrations: [Migration!] @derivedFrom(field: "fund")
}

type HourlyFundState implements IPeriodicFundState @entity {
  id: ID! # fund id + start
  fund: Fund!
  start: BigInt!
  end: BigInt!
  first: FundState!
  last: FundState!
}

type DailyFundState implements IPeriodicFundState @entity {
  id: ID! # fund id + start
  fund: Fund!
  start: BigInt!
  end: BigInt!
  first: FundState!
  last: FundState!
}

type Migration @entity {
  id: ID!
  prevRelease: Release!
  nextRelease: Release!
  fund: Fund!
  signalTimestamp: BigInt!
  executed: Boolean!
  cancelled: Boolean!
  nextAccessor: String!
}

type Release @entity {
  id: ID!
  current: Boolean!
  open: BigInt!
  close: BigInt
  funds: [Fund!] @derivedFrom(field: "release")
}

type Account @entity {
  id: ID!
  firstSeen: BigInt!
  manager: Boolean!
  managements: [Fund!]! @derivedFrom(field: "manager")
  investor: Boolean!
  investments: [Investment!]! @derivedFrom(field: "investor")
  events: [IFundEvent!]! @derivedFrom(field: "account")
}

type Investment @entity {
  id: ID!
  fund: Fund!
  investor: Account!
  shares: BigDecimal!
  state: InvestmentState!
  stateHistory: [InvestmentState!]! @derivedFrom(field: "investment")
}

type InvestmentState @entity {
  id: ID!
  timestamp: BigInt!
  fund: Fund!
  investor: Account!
  investment: Investment!
  shares: BigDecimal!
  changes: [ISharesChange!]! @derivedFrom(field: "investmentState")
}

type Fee @entity {
  id: ID!
  identifier: String!
  funds: [Fund!]!
}

type ManagementFeeSetting implements IFeeSetting @entity {
  id: ID!
  fee: Fee!
  fund: Fund!
  rate: BigDecimal!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

type PerformanceFeeSetting implements IFeeSetting @entity {
  id: ID!
  fee: Fee!
  fund: Fund!
  rate: BigDecimal!
  period: BigInt!
  activated: BigInt!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

type EntranceRateDirectFeeSetting implements IFeeSetting @entity {
  id: ID!
  fee: Fee!
  fund: Fund!
  rate: BigDecimal!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

type EntranceRateBurnFeeSetting implements IFeeSetting @entity {
  id: ID!
  fee: Fee!
  fund: Fund!
  rate: BigDecimal!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

type IntegrationAdapter @entity {
  id: ID!
  identifier: String!
}

type Policy @entity {
  id: ID!
  identifier: String!
  funds: [Fund!]!
  settings: [IPolicySetting!]! @derivedFrom(field: "policy")
}

type AdapterBlacklistSetting implements IPolicySetting @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [String!]!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

type AdapterWhitelistSetting implements IPolicySetting @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [String!]!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

type AssetBlacklistSetting implements IPolicySetting @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [String!]!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

type AssetWhitelistSetting implements IPolicySetting @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [String!]!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

type InvestorWhitelistSetting implements IPolicySetting @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  listed: [Account!]!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

type MaxConcentrationSetting implements IPolicySetting @entity {
  id: ID!
  policy: Policy!
  fund: Fund!
  maxConcentration: BigDecimal!
  timestamp: BigInt!
  events: [IFundEvent!]!
}

type ShareState implements IFundState @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  totalSupply: BigDecimal!
  outstandingForFees: BigDecimal!
  events: [IFundEvent!]!
}

type PortfolioState implements IFundState @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  holdings: [HoldingState!]!
  events: [IFundEvent!]!
}

type HoldingState implements IFundState @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  asset: Asset!
  price: AssetPrice
  quantity: BigDecimal!
  events: [IFundEvent!]!
}

type CalculationState implements IFundState @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  gav: BigDecimal!
  totalSupply: BigDecimal!
  grossSharePrice: BigDecimal!
  netSharePrice: BigDecimal!
  events: [IFundEvent!]!
}

type FundState implements IFundState @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  shares: ShareState!
  portfolio: PortfolioState!
  feeState: FeeState!
  calculations: CalculationState!
  events: [IFundEvent!]!
}

type FeeState implements IFundState @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  feeStates: [IIndividualFeeState!]!
  events: [IFundEvent!]!
}

type ManagementFeeState implements IFundState & IIndividualFeeState @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  fee: Fee!
  lastSettled: BigInt!
  totalSharesPaidOut: BigDecimal!
  events: [IFundEvent!]!
}

type PerformanceFeeState implements IFundState & IIndividualFeeState @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  fee: Fee!
  lastPaid: BigInt!
  grossSharePrice: BigDecimal!
  aggregateValueDue: BigDecimal!
  highWaterMark: BigDecimal!
  sharesOutstanding: BigDecimal!
  events: [IFundEvent!]!
}

type EntranceRateDirectFeeState implements IFundState & IIndividualFeeState @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  fee: Fee!
  lastSettled: BigInt!
  events: [IFundEvent!]!
}

type EntranceRateBurnFeeState implements IFundState & IIndividualFeeState @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  fee: Fee!
  lastSettled: BigInt!
  events: [IFundEvent!]!
}

type Trade @entity {
  id: ID!
  fund: Fund!
  adapter: IntegrationAdapter!
  incomingAssets: [Asset!]!
  incomingAssetAmounts: [BigDecimal!]!
  outgoingAssets: [Asset!]!
  outgoingAssetAmounts: [BigDecimal!]!
  timestamp: BigInt!
  transaction: Transaction!
}

#################################################
# Assets and prices
#################################################

type Asset @entity {
  id: ID!
  ref: String!
  name: String!
  symbol: String!
  decimals: Int!
  type: AssetType!

  # Details for certain derivative assets
  uniswapV2PoolAssetDetail: UniswapV2PoolAssetDetail
  compoundAssetDetail: CompoundAssetDetails

  # Latest price and candles
  price: AssetPrice
  hourly: HourlyAssetPriceCandle
  daily: DailyAssetPriceCandle

  # Historical prices and candles
  priceHistory: [AssetPrice!]! @derivedFrom(field: "asset")
  hourlyHistory: [HourlyAssetPriceCandle!]! @derivedFrom(field: "asset")
  dailyHistory: [DailyAssetPriceCandle!]! @derivedFrom(field: "asset")

  # Fund references
  denominatedFunds: [Fund!]! @derivedFrom(field: "denominationAsset")
  trackingFunds: [Fund!]! @derivedFrom(field: "trackedAssets")
}

type UniswapV2PoolAssetDetail @entity {
  id: ID!
  token0: Asset!
  token1: Asset!
}

type CompoundAssetDetails @entity {
  id: ID!
  underlying: Asset!
}

type AssetPrice @entity {
  id: ID!
  asset: Asset!
  price: BigDecimal!
  timestamp: BigInt!
}

type HourlyAssetPriceCandle @entity {
  id: ID!
  asset: Asset!
  group: HourlyAssetPriceCandleGroup!
  from: BigInt!
  to: BigInt!
  open: BigDecimal!
  openRef: AssetPrice!
  close: BigDecimal!
  closeRef: AssetPrice!
  low: BigDecimal!
  lowRef: AssetPrice!
  high: BigDecimal!
  highRef: AssetPrice!
}

type DailyAssetPriceCandle @entity {
  id: ID!
  asset: Asset!
  group: DailyAssetPriceCandleGroup!
  from: BigInt!
  to: BigInt!
  open: BigDecimal!
  openRef: AssetPrice!
  close: BigDecimal!
  closeRef: AssetPrice!
  low: BigDecimal!
  lowRef: AssetPrice!
  high: BigDecimal!
  highRef: AssetPrice!
}

type HourlyAssetPriceCandleGroup @entity {
  id: ID!
  from: BigInt!
  to: BigInt!
  candles: [HourlyAssetPriceCandle!]! @derivedFrom(field: "group")
}

type DailyAssetPriceCandleGroup @entity {
  id: ID!
  from: BigInt!
  to: BigInt!
  candles: [DailyAssetPriceCandle!]! @derivedFrom(field: "group")
}

type ChainlinkAggregator @entity {
  id: ID!
  type: ChainlinkAggregatorType!
  asset: Asset
  active: Boolean!
  updates: [ChainlinkAggregatorAnswerUpdatedEvent!]! @derivedFrom(field: "aggregator")
}

# Knowing the timestamp of the most recent update allows us to create missing
# candles / fill gaps and decide when to re-fetch prices for our derivatives.
# Every time a new hour / day is started (checked with modulo based
# on the timestamp), we create new group entities and also fill gaps in the
# candles. We can always load the most recent candles because we know the
# when it was most recently updated.
type Cron @entity {
  id: ID!

  # The last time that cron was triggered.
  cron: BigInt!

  # The currently tracked primitives. This is used to know which assets we
  # need to maintain candles for.
  primitives: [Asset!]!

  # Asset with prices quoted in USD
  usdQuotedPrimitives: [Asset!]!

  # The currently tracked derivatives. This is used to know which derivatives
  # to fetch prices for (as a side effect, because they don't have a dedicated
  # price oracle that emits events on their behalf) and to update their candles.
  derivatives: [Asset!]!
}
