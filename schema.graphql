type Registry @entity {
  id: ID!
  engine: Engine
  versions: [Version!]!
  assets: [Asset!]! @derivedFrom(field: "registry")
  funds: [Fund!]! @derivedFrom(field: "registry")
}

type Version @entity {
  id: ID!
  registry: Registry
  funds: [Fund!]! @derivedFrom(field: "version")
}

type Engine @entity {
  id: ID!
  registry: Registry
  amguPrices: [AmguPrice!]! @derivedFrom(field: "engine")
  amguPayments: [AmguPayment!]! @derivedFrom(field: "engine")
  etherThawings: [ThawEther!]! @derivedFrom(field: "engine")
  etherBurnings: [BurnEther!]! @derivedFrom(field: "engine")
}

type AmguPrice @entity {
  id: ID!
  engine: Engine!
  price: BigInt!
  timestamp: BigInt!
}

type AmguPayment @entity {
  id: ID!
  engine: Engine!
  amount: BigInt!
  timestamp: BigInt!
}

type ThawEther @entity {
  id: ID!
  engine: Engine!
  ether: BigInt!
  timestamp: BigInt!
}

type BurnEther @entity {
  id: ID!
  engine: Engine!
  ether: BigInt!
  timestamp: BigInt!
}

type Asset @entity {
  id: ID!
  decimals: Int!
  symbol: String!
  name: String!
  registry: Registry!
}

type Fund @entity {
  id: ID!
  name: String!
  manager: String!
  investments: [Investment!]! @derivedFrom(field: "fund")
  creationTime: BigInt!
  isShutdown: Boolean!
  accounting: Accounting!
  participation: Participation!
  feeManager: FeeManager!
  policyManager: PolicyManager!
  shares: Shares!
  trading: Trading!
  vault: Vault!
  registry: Registry!
  version: Version!
  engine: String!
  mlnToken: String!
  priceSource: String!
}

type Accounting @entity {
  id: ID!
  fund: Fund!
  demoniationAsset: Asset!
  nativeAsset: Asset!
  ownedAssets: [Asset!]!
}

type Participation @entity {
  id: ID!
  fund: Fund!
  allowedAssets: [Asset!]!
  investmentRequests: [InvestmentRequest!]!
}

type FeeManager @entity {
  id: ID!
  fund: Fund!
}

type PolicyManager @entity {
  id: ID!
  fund: Fund!
}

type Policy @entity {
  id: ID!
  signature: String!
  position: Int!
  policy: String!
}

type Shares @entity {
  id: ID!
  fund: Fund!
}

type Trading @entity {
  id: ID!
  fund: Fund!
}

type Vault @entity {
  id: ID!
  fund: Fund!
}

type InvestmentRequest @entity {
  id: ID!
  fund: Fund!
}

type Investor @entity {
  id: ID!
  investments: [Investment!]! @derivedFrom(field: "owner")
}

type Investment @entity {
  id: ID!
  fund: Fund!
  owner: Investor!
  shares: BigInt!
  sharePrice: BigInt!
}

type AssetPriceUpdate @entity {
  id: ID!
  prices: [AssetPrice!]! @derivedFrom(field: "assetPriceUpdate")
  timestamp: BigInt!
}

type AssetPrice @entity {
  id: ID!
  asset: Asset!
  price: BigInt!
  timestamp: BigInt!
  assetPriceUpdate: AssetPriceUpdate!
}
