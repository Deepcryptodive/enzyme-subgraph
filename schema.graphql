enum PolicyIdentifierEnum {
  CUSTOM
  MAX_CONCENTRATION
  MAX_POSITIONS
  PRICE_TOLERANCE
  USER_WHITELIST
  ASSET_BLACKLIST
  ASSET_WHITELIST
}

enum FeeIdentifierEnum {
  CUSTOM
  MANAGEMENT
  PERFORMANCE
}

# TODO: Add a INCEPTION fund event.
enum EventKindEnum {
  INVESTMENT
  REDEMPTION
  REWARD
  TRADE
}

type ContractEvent @entity {
  id: ID!
  version: Version!
  fund: Fund
  name: String!
  contract: String!
  transaction: String!
  from: String!
  timestamp: BigInt!
  block: BigInt!
}

interface Event {
  id: ID!
  kind: EventKindEnum!
  fund: Fund!
  version: Version!
  timestamp: BigInt!
  trigger: ContractEvent!
}

type Version @entity {
  id: ID!
  funds: [Fund!]! @derivedFrom(field: "version")
  events: [Event!]! @derivedFrom(field: "version")
  assets: [Asset!]!
  exchanges: [Exchange!]!
}

interface Metric {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  events: [Event!]!
}

type Share implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  shares: BigDecimal!
  events: [Event!]!
}

type Holding implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  asset: Asset!
  quantity: BigDecimal!
  events: [Event!]!
}

type Portfolio implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  holdings: [Holding!]!
  events: [Event!]!
}

type State implements Metric @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  shares: Share!
  portfolio: Portfolio!
  events: [Event!]!
}

type Fund @entity {
  id: ID!
  name: String!
  version: Version!
  active: Boolean!
  manager: Account!
  inception: BigInt!
  investable: [Asset!]!
  events: [Event!]! @derivedFrom(field: "fund")
  investments: [Investment!]! @derivedFrom(field: "fund")
  policies: [Policy!]! @derivedFrom(field: "fund")
  fees: [Fee!]! @derivedFrom(field: "fund")
  trades: [Trade!]! @derivedFrom(field: "fund")
  shares: Share!
  sharesHistory: [Share!]! @derivedFrom(field: "fund")
  portfolio: Portfolio!
  portfolioHistory: [Portfolio!]! @derivedFrom(field: "fund")
  state: State!
  stateHistory: [State!]! @derivedFrom(field: "fund")
}

interface Fee {
  id: ID!
  fund: Fund!
  identifier: FeeIdentifierEnum!
}

type CustomFee implements Fee @entity {
  id: ID!
  fund: Fund!
  identifier: FeeIdentifierEnum!
}

type PerformanceFee implements Fee @entity {
  id: ID!
  fund: Fund!
  identifier: FeeIdentifierEnum!
  rate: BigDecimal!
  period: BigInt!
}

type ManagementFee implements Fee @entity {
  id: ID!
  fund: Fund!
  identifier: FeeIdentifierEnum!
  rate: BigDecimal!
}

interface Policy {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  identifier: PolicyIdentifierEnum!
}

type CustomPolicy implements Policy @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  identifier: PolicyIdentifierEnum!
}

type UserWhitelistPolicy implements Policy @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  identifier: PolicyIdentifierEnum!
}

type PriceTolerancePolicy implements Policy @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  identifier: PolicyIdentifierEnum!
}

type MaxPositionsPolicy implements Policy @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  identifier: PolicyIdentifierEnum!
}

type MaxConcentrationPolicy implements Policy @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  identifier: PolicyIdentifierEnum!
}

type AssetBlacklistPolicy implements Policy @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  identifier: PolicyIdentifierEnum!
}

type AssetWhitelistPolicy implements Policy @entity {
  id: ID!
  fund: Fund!
  timestamp: BigInt!
  identifier: PolicyIdentifierEnum!
}

interface InvestmentEvent {
  id: ID!
  kind: EventKindEnum!
  fund: Fund!
  version: Version!
  timestamp: BigInt!
  transaction: String!
  trigger: ContractEvent!
  investment: Investment!
}

type InvestmentAddition implements Event & InvestmentEvent @entity {
  id: ID!
  kind: EventKindEnum!
  fund: Fund!
  version: Version!
  investor: Account!
  investment: Investment!
  shares: BigDecimal!
  asset: Asset!
  quantity: BigDecimal!
  timestamp: BigInt!
  transaction: String!
  trigger: ContractEvent!
}

type InvestmentRedemption implements Event & InvestmentEvent @entity {
  id: ID!
  kind: EventKindEnum!
  fund: Fund!
  version: Version!
  investor: Account!
  investment: Investment!
  shares: BigDecimal!
  assets: [Asset!]!
  quantities: [BigDecimal!]!
  timestamp: BigInt!
  transaction: String!
  trigger: ContractEvent!
}

type InvestmentReward implements Event & InvestmentEvent @entity {
  id: ID!
  kind: EventKindEnum!
  fund: Fund!
  version: Version!
  investor: Account!
  investment: Investment!
  shares: BigDecimal!
  timestamp: BigInt!
  transaction: String!
  trigger: ContractEvent!
}

type InvestmentRequest @entity {
  id: ID!
  fund: Fund!
  investor: Account!
  asset: Asset!
  quantity: BigDecimal!
  timestamp: BigInt!
  transaction: String!
}

type Investment @entity {
  id: ID!
  fund: Fund!
  investor: Account!
  changes: [InvestmentEvent!]! @derivedFrom(field: "investment")
  shares: BigDecimal!
}

type Account @entity {
  id: ID!
  manager: Boolean!
  managements: [Fund!]! @derivedFrom(field: "manager")
  investor: Boolean!
  investments: [Investment!]! @derivedFrom(field: "investor")
  requests: [Investment!]! @derivedFrom(field: "investor")
}

type Asset @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}

# interface Order {
#   id: ID!
#   fund: Fund!
#   exchange: Exchange!
#   timestamp: BigInt!
# }

type Trade implements Event @entity {
  id: ID!
  kind: EventKindEnum!
  fund: Fund!
  version: Version!
  exchange: Exchange!
  timestamp: BigInt!
  methodName: String!
  assetSold: String
  assetBought: String
  amountSold: BigDecimal
  amountBought: BigDecimal
  transaction: String!
  trigger: ContractEvent!
}

# type CancelOrder implements Order @entity {
#   id: ID!
#   fund: Fund!
#   exchange: Exchange!
#   timestamp: BigInt!
# }

type Exchange @entity {
  id: ID!
  name: String
}
